<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Wern Ancheta</title><link>https://anchetaWern.github.io/posts/</link><description>Recent content in Posts on Wern Ancheta</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 09 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://anchetaWern.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>PHP Design Patterns: Command Pattern</title><link>https://anchetaWern.github.io/posts/command-pattern-in-php/</link><pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/command-pattern-in-php/</guid><description>This is the 14th post in a series of articles that will walk you through how to implement design patterns in PHP.
In this part, we&amp;rsquo;re going to take a look at how you can implement the Command Pattern.
This pattern is a behavioral pattern that allows you to reduce coupling between client and business logic. That way you don&amp;rsquo;t have to make changes to the client code everytime you introduce a new business logic.</description></item><item><title>PHP Design Patterns: Singleton Pattern</title><link>https://anchetaWern.github.io/posts/singleton-pattern-in-php/</link><pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/singleton-pattern-in-php/</guid><description>This is the 13th post in a series of articles that will walk you through how to implement design patterns in PHP.
In this part, we&amp;rsquo;re going to take a look at how you can implement the Singleton Pattern.
The Singleton Pattern is a creational design pattern for ensuring that you&amp;rsquo;re only ever working with a single instance of a class. This makes it very predictable in terms of the values it handles.</description></item><item><title>PHP Design Patterns: Bridge Pattern</title><link>https://anchetaWern.github.io/posts/bridge-design-pattern-in-php/</link><pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/bridge-design-pattern-in-php/</guid><description>This is the twelfth post in a series of articles that will walk you through how to implement design patterns in PHP.
In this part, we&amp;rsquo;re going to take a look at how you can implement the Bridge Pattern.
This pattern kinda looks similar to the Strategy Pattern, but on a wider scale. The basic idea is to separate the implementations from the different strategies so that each strategy can use those implementations interchangeably.</description></item><item><title>PHP Design Patterns: Composite Pattern</title><link>https://anchetaWern.github.io/posts/composite-pattern-in-php/</link><pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/composite-pattern-in-php/</guid><description>This is the eleventh post in a series of articles that will walk you through how to implement design patterns in PHP.
In this part, we&amp;rsquo;re going to take a look at how you can implement the Composite Pattern.
This pattern is used for treating a group of objects the same way you treat any single instance of the object. This is most commonly used for building UI, specifically tree structures which has varying levels of nesting.</description></item><item><title>PHP Design Patterns: Null Object Pattern</title><link>https://anchetaWern.github.io/posts/null-object-pattern-in-php/</link><pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/null-object-pattern-in-php/</guid><description>This is the tenth post in a series of articles that will walk you through how to implement design patterns in PHP.
In this part, we&amp;rsquo;re going to take a look at how you can implement the Null Object Pattern.
This pattern is used for getting rid of null checks. So instead of conditionals all over your code, you create a separate class which will be used for instances wherein the things you&amp;rsquo;re checking simply doesn&amp;rsquo;t exist.</description></item><item><title>PHP Design Patterns: Factory Pattern</title><link>https://anchetaWern.github.io/posts/factory-pattern-in-php/</link><pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/factory-pattern-in-php/</guid><description>This is the ninth post in a series of articles on how to implement design patterns in PHP.
In this part, we&amp;rsquo;ll see how we can implement the Factory Pattern.
This pattern is used for returning an instance of another classe. Why would anyone want to create a separate class which just returns another class you say? That’s because oftentimes you’re not just dealing with a single class. More often that not, two or more class instances (or just their properties) is required to create an instance of another class.</description></item><item><title>PHP Design Patterns: Observer Pattern</title><link>https://anchetaWern.github.io/posts/observer-pattern-in-php/</link><pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/observer-pattern-in-php/</guid><description>This is the eight post in a series of articles on how to implement design patterns in PHP.
In this part, we&amp;rsquo;ll see how we can implement the Observer Pattern.
As the name suggests, the Observer Pattern is used for notifying other parts of your code when a specific event happens. It&amp;rsquo;s a way of decoupling your code so that you don&amp;rsquo;t have to explicitly call on methods from different classes whenever something happens.</description></item><item><title>PHP Design Patterns: Specification Pattern</title><link>https://anchetaWern.github.io/posts/specification-pattern-in-php/</link><pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/specification-pattern-in-php/</guid><description>This is the seventh post in a series of articles on how to implement design patterns in PHP.
This part, we&amp;rsquo;ll go through the Specification Pattern. It is used when you want to upgrade some business rule into a first-class citizen. So you create a separate class for each business rule. At its core, all it does is check for a specific condition and returns either true or false.
The most common example are the business rules surrounding a user.</description></item><item><title>PHP Design Patterns: Chain of Responsibility Pattern</title><link>https://anchetaWern.github.io/posts/chain-of-responsibility-pattern-in-php/</link><pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/chain-of-responsibility-pattern-in-php/</guid><description>This is the sixth post in a series of articles that will walk you through how to implement design patterns in PHP.
In this post, we&amp;rsquo;ll take a look at how you can implement the Chain of Responsibility pattern.
This pattern allows you to chain related code together in such a way that the control is passed to the next link in the chain if the condition you&amp;rsquo;re checking for in the current chain passes.</description></item><item><title>PHP Design Patterns: Template Method Pattern</title><link>https://anchetaWern.github.io/posts/template-method-pattern-in-php/</link><pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/template-method-pattern-in-php/</guid><description>This is the fifth post in a series of articles that will walk you through how to implement design patterns in PHP.
In this part, we&amp;rsquo;re going to take a look at how you can implement the Template Method Pattern.
You can use this pattern to reduce code duplication in cases where you have a set of related classes which does almost the same thing but not quite. This can be because each class needs to do one or more things just a bit differently.</description></item><item><title>PHP Design Patterns: Strategy Pattern</title><link>https://anchetaWern.github.io/posts/strategy-pattern-in-php/</link><pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/strategy-pattern-in-php/</guid><description>This is the fourth post in a series of articles that will walk you through how to implement design patterns in PHP.
In this part, we&amp;rsquo;re going to take a look at how you can implement the strategy pattern.
The strategy pattern can be used when you have multiple ways to implement something. A common example of this is mail. To send an email from your application, you most likely need to use mail services like Mailgun, Amazon Simple Email Service, Mandrill, SparkPost, etc.</description></item><item><title>PHP Design Patterns: Adapter Pattern</title><link>https://anchetaWern.github.io/posts/adapter-pattern-in-php/</link><pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/adapter-pattern-in-php/</guid><description>This is the third post in a series of articles that will walk you through how to implement design patterns in PHP.
In this part, we&amp;rsquo;ll look at how you can implement the adapter pattern. Just like the name suggests, the Adapter pattern is simply a way to translate a third-party code to a common interface that you can use it within your existing codebase.
For example, we have a Client class which uses a filesystem library to open a file:</description></item><item><title>PHP Design Patterns: Facade Pattern</title><link>https://anchetaWern.github.io/posts/facade-pattern-in-php/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/facade-pattern-in-php/</guid><description>This is the second post in a series of articles that will walk you through how to implement design patterns in PHP.
In this part, we&amp;rsquo;re going to take a look at how you can implement the facade pattern.
The Facade pattern is a way of providing a simple and clear interface to a complex system. Because when you have a bunch of classes and they each have their own complex code, it may not be always clear which methods should be called by the client coder.</description></item><item><title>PHP Design Patterns: Decorator Pattern</title><link>https://anchetaWern.github.io/posts/decorator-pattern-in-php/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/decorator-pattern-in-php/</guid><description>This is the first post in a series of articles that will walk you through how to implement design patterns in PHP.
In this post, we&amp;rsquo;ll take a look at how you can implement the decorator pattern in PHP. You can use the decorator pattern to change or adjust the behavior of an existing object.
To quickly understand how the decorator pattern works, we will use a customizable product as an example.</description></item><item><title>Getting Started with Laravel Facades</title><link>https://anchetaWern.github.io/posts/getting-started-with-laravel-facades/</link><pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/getting-started-with-laravel-facades/</guid><description>Facades in Laravel allows you to call non-static methods as if they were static methods. This makes it possible for you to call methods in certain classes without the need for creating an object everytime you use them. It basically has the same benefit of using the service container.
Before we look into how we can implement our own Facades with Laravel, let&amp;rsquo;s first take a look at a few examples on how Laravel uses Facades.</description></item><item><title>A Primer to Service Container in Laravel</title><link>https://anchetaWern.github.io/posts/a-primer-to-service-container-in-laravel/</link><pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/a-primer-to-service-container-in-laravel/</guid><description>In this post we&amp;rsquo;ll take a look at how to make use of the service container in Laravel.
Let&amp;rsquo;s say we have a class for paying with Stripe:
&amp;lt;?php namespace App\Services; class StripePaymentService { public function pay() { return &amp;#39;paid!&amp;#39;; } } With type-hinting, you can easily make use of this class like so:
&amp;lt;?php use App\Services\StripePaymentService; class PaymentsController extends Controller { public function pay(StripePaymentService $stripe) { return $stripe-&amp;gt;pay(); } This way you don&amp;rsquo;t need to initialize it before you can call the method:</description></item></channel></rss>