<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Wern Ancheta</title><link>https://anchetaWern.github.io/posts/</link><description>Recent content in Posts on Wern Ancheta</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://anchetaWern.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>PHP Design Patterns: Decorator Pattern</title><link>https://anchetaWern.github.io/posts/decorator-pattern-in-php/</link><pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/decorator-pattern-in-php/</guid><description>This is the first post in a series of articles that will walk you through how to implement design patterns in PHP.
In this post, we&amp;rsquo;ll take a look at how you can implement the decorator pattern in PHP. You can use the decorator pattern to change or adjust the behavior of an existing object.
To quickly understand how the decorator pattern works, we will use a customizable product as an example.</description></item><item><title>Getting Started with Laravel Facades</title><link>https://anchetaWern.github.io/posts/getting-started-with-laravel-facades/</link><pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/getting-started-with-laravel-facades/</guid><description>Facades in Laravel allows you to call non-static methods as if they were static methods. This makes it possible for you to call methods in certain classes without the need for creating an object everytime you use them. It basically has the same benefit of using the service container.
Before we look into how we can implement our own Facades with Laravel, let&amp;rsquo;s first take a look at a few examples on how Laravel uses Facades.</description></item><item><title>A Primer to Service Container in Laravel</title><link>https://anchetaWern.github.io/posts/a-primer-to-service-container-in-laravel/</link><pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate><guid>https://anchetaWern.github.io/posts/a-primer-to-service-container-in-laravel/</guid><description>In this post we&amp;rsquo;ll take a look at how to make use of the service container in Laravel.
Let&amp;rsquo;s say we have a class for paying with Stripe:
&amp;lt;?php namespace App\Services; class StripePaymentService { public function pay() { return &amp;#39;paid!&amp;#39;; } } With type-hinting, you can easily make use of this class like so:
&amp;lt;?php use App\Services\StripePaymentService; class PaymentsController extends Controller { public function pay(StripePaymentService $stripe) { return $stripe-&amp;gt;pay(); } This way you don&amp;rsquo;t need to initialize it before you can call the method:</description></item></channel></rss>